[{"name": "app.py", "content": "from shiny import reactive, render\nfrom shiny.express import input\nfrom datetime import datetime\nimport random\nfrom faicons import icon_svg\n# From shiny.express, import just ui\nfrom shiny.express import ui\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\nui.tags.link(rel=\"stylesheet\", href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\")\n\n# Define temperature data for different locations with sufficient readings\ntemperature_data = {\n    \"Dome A\": [round(random.uniform(-18, -16), 1) for _ in range(10)],\n    \"McMurdo\": [round(random.uniform(-10, 0), 1) for _ in range(10)],\n    \"Vostok\": [round(random.uniform(-20, -15), 1) for _ in range(10)],\n    \"Amundsen-Scott\": [round(random.uniform(-15, -5), 1) for _ in range(10)],\n}\n\n\n# Constants\nUPDATE_INTERVAL_SECS: int = 1\n\n# Define the UI\n\nui.page_opts(title=\"Kersha: Antarctic Temperature Tracker\", fillable=True),\n\n# Add CSS for background color\nui.tags.style(\"\"\"\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap'); /* Import a Google Font */\n\n    body {\n        background-color: #f0f8ff; /* Light blue background */\n        font-family: 'Roboto', sans-serif; /* Apply the font globally */\n    }\n\n    h2 {\n        font-weight: 700; /* Bold font for headers */\n    }\n\n    .center-img {\n        display: block;\n        margin: auto;\n        width: 150px; /* Adjust width as needed */\n    }\n\"\"\")\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n\n    ui.div(ui.tags.i(class_=\"fas fa-sun\", style=\"font-size: 2em; color: orange;\"), class_=\"text-center\")\n# Location selector dropdown\n    ui.input_select(\"location\", \"Select Location\", choices=[\"Dome A\", \"McMurdo\", \"Vostok\", \"Amundsen-Scott\"], selected=\"McMurdo\")\n\n\n  # Display the penguin image from the provided URL\n    ui.img(\n        src=\"https://media.istockphoto.com/id/147290529/photo/emperors.jpg?s=612x612&w=0&k=20&c=ZApZFJtKoXGKYYJsgNcNPTMHqqSbbAx9CBg2AF2qyJk=\",\n        alt=\"Emperor Penguins\",\n        class_=\"center-img\"\n    )\n\n    ui.p(\n    ui.tags.i(class_=\"fas fa-thermometer-half\", style=\"font-size: 1.5em; color: red;\"),\n    \" Real-time temperature trend with linear regression analysis.\"\n    )\n\n    ui.hr()\n\n    ui.h6(\"Links:\")\n\n    ui.a(\n        ui.tags.i(class_=\"fab fa-github\", style=\"font-size: 1.5em; color: black;\"),\n        \" An Interactive Insight to the Penguin Species of Antarctica\",\n        href=\"https://github.com/kersha0530/cintel-04-local\",\n        target=\"_blank\",\n    )\n\n    ui.a(\n        ui.tags.i(class_=\"fab fa-github\", style=\"font-size: 1.5em; color: black;\"),\n        \" GitHub App\",\n        href=\"https://github.com/kersha0530/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n\n    ui.a(\n        ui.tags.i(class_=\"fa-brands fa-github\" , style=\"font-size: 1.5em; color: black;\"),\n        \"GitHub Source\",\n        href=\"https://github.com/kersha0530/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n\n    ui.a(\n        ui.tags.i(class_=\"fas fa-shield-alt\", style=\"font-size: 1.5em; color: darkblue;\"),\n        \" PyShiny\",\n        href=\"https://shiny.posit.co/py/\",\n        target=\"_blank\"\n    )\n\n#---------------------------------------------------------------------\n# In Shiny Express, everything not in the sidebar is in the main panel\n#---------------------------------------------------------------------\n    \nui.h2(\"Current Temperature\")\n\n@render.text\ndef display_temp():\n    \"\"\"Get the latest reading and return a temperature string\"\"\"\n    latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['temp']} C\"\n\nui.p(\"warmer than usual\")\nicon_svg(\"sun\")\n\nui.hr()\n\nui.h2(\"Current Date and Time\")\n\n@render.text\ndef display_time():\n    \"\"\"Get the latest reading and return a timestamp string\"\"\"\n    latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['timestamp']}\"\n\n@render.text\ndef display_location():\n    latest_dictionary_entry = reactive_calc_combined()\n    return latest_dictionary_entry['location']\n\n@render.text\ndef display_avg_temp():\n    latest_dictionary_entry = reactive_calc_combined()\n    location = latest_dictionary_entry['location']\n    temps = temperature_data[location]\n    avg_temp = sum(temps) / len(temps) if temps else None\n    return f\"Average Temperature: {avg_temp} \u00b0C\" if avg_temp is not None else \"No data available\"\n\n@render.text\ndef display_min_temp():\n    latest_dictionary_entry = reactive_calc_combined()\n    location = latest_dictionary_entry['location']\n    min_temp = min(temperature_data[location]) if temperature_data[location] else None\n    return f\"Minimum Temperature: {min_temp} \u00b0C\" if min_temp is not None else \"No data available\"\n\n@render.text\ndef display_max_temp():\n    latest_dictionary_entry = reactive_calc_combined()\n    location = latest_dictionary_entry['location']\n    max_temp = max(temperature_data[location]) if temperature_data[location] else None\n    return f\"Maximum Temperature: {max_temp} \u00b0C\" if max_temp is not None else \"No data available\"\n\n\n # Display the current data (location, average temp, min temp, max temp) \nwith ui.layout_columns(): \n    with ui.card(): \n        ui.card_header(\"Current Data\") \n        ui.p(\"Location:\") \n       \n   \n# Display the plot \nwith ui.layout_columns(): \n    with ui.card(): \n        ui.card_header(\"Current Chart\") \n        \n@render.image\ndef temperature_plot():\n    location = input.location()\n    plot_temperature_data(location)\n    \n    # Ensure the path is correct\n    img_path = \"C:\\\\Users\\\\kbrou\\\\OneDrive\\\\Documents\\\\temperature_plot.png\"\n    \n    return {\n        \"src\": img_path,\n        \"alt\": f\"Temperature Trends at {location}\",\n        \"height\": \"400px\"\n    }\n\ndef plot_temperature_data(location):\n    plt.figure(figsize=(10, 5))\n\n    if location in temperature_data and temperature_data[location]:\n        plt.plot(temperature_data[location], marker='o')\n        plt.title(f'Temperature Trends at {location}')\n        plt.xlabel('Time (last 10 readings)')\n        plt.ylabel('Temperature (\u00b0C)')\n        plt.xticks(range(len(temperature_data[location])), [f'Reading {i+1}' for i in range(len(temperature_data[location]))])\n        plt.grid()\n    else:\n        plt.title(f'No data available for {location}')\n        plt.text(0.5, 0.5, 'No data available', horizontalalignment='center', verticalalignment='center', fontsize=15)\n\n    plt.tight_layout()\n    plt.savefig('C:\\\\Users\\\\kbrou\\\\OneDrive\\\\Documents\\\\temperature_plot.png')  # Save the plot with the full path\n    plt.close()\n\n\n\n# Server logic\ndef app_server(input, output, session):\n    @output\n    @render.text\n    def display_temp():\n        latest_entry = reactive_calc_combined()\n        return f\"{latest_entry['temp']} \u00b0C\"\n\n    @output\n    @render.text\n    def display_time():\n        latest_entry = reactive_calc_combined()\n        return f\"{latest_entry['timestamp']}\"\n\n\n        \n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Get the selected location from the input\n    selected_location = input.location()\n\n    # Ensure we are handling a valid selected location\n    if selected_location in temperature_data and temperature_data[selected_location]:\n        temp = temperature_data[selected_location][-1]  # Get the latest temperature\n    else:\n        temp = None  # Handle unexpected location or empty data\n\n    # Get a timestamp for \"now\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    latest_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp, \"location\": selected_location}\n\n    # Return everything we need\n    return latest_dictionary_entry\n", "type": "text"}]